name: Reusable Databricks CI/CD

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      notebook_path:
        required: true
        type: string
      databricks_path:
        required: true
        type: string
    secrets:
      DATABRICKS_HOST:
        required: true
      DATABRICKS_TOKEN:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Databricks CLI
        run: pip install databricks-cli

      - name: Print Debug Information (for testing)
        run: |
          echo "DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}"
          echo "DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}"

      - name: Configure Databricks CLI for the correct environment
        run: |
          mkdir -p ~/.databricks-cli
          if [ "${{ inputs.environment }}" == "dev" ]; then
            echo "[DEFAULT]" > ~/.databricks-cli/config
            echo "host = ${{ secrets.DATABRICKS_HOST }}" >> ~/.databricks-cli/config
            echo "token = ${{ secrets.DATABRICKS_TOKEN }}" >> ~/.databricks-cli/config
          elif [ "${{ inputs.environment }}" == "test" ]; then
            echo "[DEFAULT]" > ~/.databricks-cli/config
            echo "host = ${{ secrets.DATABRICKS_HOST_TEST }}" >> ~/.databricks-cli/config
            echo "token = ${{ secrets.DATABRICKS_TOKEN_TEST }}" >> ~/.databricks-cli/config
          else
            echo "Invalid environment specified"
            exit 1
          fi

      - name: Upload notebook to ${{ inputs.environment }}
        run: |
          echo "Uploading notebook to Databricks..."
          databricks workspace import ${{ inputs.notebook_path }} ${{ inputs.databricks_path }} --language PYTHON --overwrite
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
